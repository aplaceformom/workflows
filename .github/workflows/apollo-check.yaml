name: Perform Apollo Schema Check

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        type: string
        default: dev
      install-command:
        description: 'Command to use to perform a Npm/Yarn/etc install. Default: npm install --production=false'
        type: string
        default: npm ci --production=false
      node-version:
        description: 'Node.js version to use. Default: auto-detected'
        type: string
        required: false
      node-env:
        description: 'The NODE_ENV we are targetting. Default: development'
        type: string
        default: development
      action:
        description: 'NPM action to run'
        type: string
        required: true
      schema-file:
        description: 'Path to schema file'
        type: string
        required: true
      service-name:
        description: 'Name of the service'
        type: string
        required: true
      service-url:
        description: 'URL to service GraphQL endpoint'
        type: string
        required: true
    secrets:
      apollo-key:
        description: 'The Apollo Key'
        required: true

jobs:
  checks:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: ${{ inputs.node-env }}
    steps:
    - uses: actions/checkout@v3

    - id: node
      run: |
        : detect node-version-file
        node_version='null'
        test -f 'package.json' && node_version="$(jq -r .engines.node ./package.json)"
        if test "${node_version}" != 'null'; then
          echo 'version-file=package.json'  >> "${GITHUB_OUTPUT}"
        else
          for version_file in .nvmrc .node-version .tool-versions; do
            if test -f "${version_file}"; then
              echo "version-file=${version_file}" >> "${GITHUB_OUTPUT}"
              break
            fi
          done
        fi

    - uses: actions/setup-node@v2
      with:
        node-version: ${{ inputs.node-version }}
        node-version-file: ${{ steps.node.output.version-file }}

    - uses: bahmutov/npm-install@v1
      with:
        install-command: ${{ inputs.install-command }}

    - uses: aplaceformom/actions-apollo-service-checks@main
      with:
        action: ${{ inputs.action }}
        localSchemaFile: ${{ inputs.schema-file }}
        key: ${{ secrets.apollo-key }}
        variant: ${{ inputs.environment }}
        serviceName: ${{ inputs.service-name }}
        serviceURL: ${{ inputs.service-url }}
